---
/**
 * @author Letsmoe
 * @email moritz.utcke@gmx.de
 * @create date 2022-11-19 13:33:00
 * @modify date 2022-11-19 13:33:00
 * @desc This page is accessed only from our server, the request contains information about the public_key of the application
 * and the scope the application wants to access, we validate all that and show the user the option
 * to link or to cancel the process.
 */
import { BlankLayout } from "@continuum-ai/ui";
import ScopeInfo from "../../components/ScopeInfo.svelte";
import { getLinkApp, Scope, isLoggedIn } from "@continuum-ai/utilities";

const publicKey = Astro.url.searchParams.get("public_key");
const scope = "public_profile," + Astro.url.searchParams.get("scope");

// Check if the public id and scope attributes were actually given.
if (!publicKey || !scope) {
  return Astro.redirect("/app/invalid");
}

// Get the user from the current session.
const user = await isLoggedIn(Astro.cookies);

// If the user is not logged in, we redirect him to the login panel
if (!user) {
  return Astro.redirect("/login?redirect=" + encodeURI(Astro.url));
}

// Otherwise we need to find the actual app we want to connect to.
const app = await getLinkApp(publicKey);

// If the app doesn't exist in the database we know the app is invalid or the public_key is wrong.
if (!app) {
  return Astro.redirect("/app/invalid");
}

// An object matching all possible scopes to titles and descriptions.
const scopes: { [key: string]: Scope } = {
  public_profile: {
    name: "Public Access",
    description:
      "Access to your public <strong>Username</strong> and <strong>ID</strong>",
    icon: "public",
  },
  email: {
    name: "Private Access",
    description: "Access to your <strong>Personal Email</strong>",
    icon: "lock",
  },
  name: {
    name: "Personal Details",
    description: "Access to your <strong>Full Name</strong>",
    icon: "info",
  },
  residence: {
    name: "Home Address",
    description: "Access to your <strong>Personal Address</strong>",
    icon: "location_on",
  },
  usage: {
    name: "Usage Statistics",
    description:
      "Access to <strong>Usage Data</strong> collected by our services.",
    icon: "monitoring",
  },
};

const requestedScopes = [];
for (const part of scope.split(",")) {
  let trimmed = part.trim();
  if (scopes.hasOwnProperty(trimmed)) {
    requestedScopes.push(scopes[trimmed]);
  }
}
---

<BlankLayout title="Link - Authorize">
  <form class="column" action="/app/success" method="GET">
    <div class="row mb-xl align-center">
      <img src="https://continuum-ai.de/favicon.ico" class="round" />
      <span class="connection"></span>
      <img
        src="https://cdn.dribbble.com/userupload/3158902/file/original-7c71bfa677e61dea61bc2acd59158d32.jpg?resize=400x0"
        class="round"
      />
    </div>
    <h1>Authorize <strong>{app.name}</strong>!</h1>
    <div class="column gap-sm">
      {requestedScopes.map((x) => <ScopeInfo scope={x} />)}
      <hr />
      <input type="hidden" name="public_key" value={publicKey} readonly />
      <input type="hidden" name="scope" value={scope} readonly />
      <button>Link</button>
      <p>
        By linking your account to a third-party you agree to our <a href=""
          >Privacy Policy</a
        > and allow information exchange of Continuum-AI Inc. with other service
        providers. You agree to submit some of your account data to <strong
          >{app.name}</strong
        > and therefore agree to their Terms of Service.
      </p>
    </div>
  </form>
</BlankLayout>
