---
/**
 * @author Letsmoe
 * @email moritz.utcke@gmx.de
 * @create date 2022-11-19 13:33:00
 * @modify date 2022-11-19 13:33:00
 * @desc This page is accessed only from our server, the request contains information about the public_key of the application
 * and the scope the application wants to access, we validate all that and show the user the option
 * to link or to cancel the process.
 */
import LinkClose from "../../components/LinkClose.svelte";
import { BlankLayout } from "@continuum-ai/ui";
import {
  getLinkApp,
  getLinkConnection,
  addLinkConnection,
  isLoggedIn,
} from "@continuum-ai/utilities";

const publicKey = Astro.url.searchParams.get("public_key");
const scope = "public_profile," + Astro.url.searchParams.get("scope");

// Check if the public id and scope attributes were actually given.
if (!publicKey || !scope) {
  return Astro.redirect("/app/invalid");
}

// Get the user from the current session.
const user = await isLoggedIn(Astro.cookies);

// If the user is not logged in, we redirect him to the login panel
if (!user) {
  return Astro.redirect("/login?redirect=" + encodeURI(Astro.url));
}

// Otherwise we need to find the actual app we want to connect to.
const app = await getLinkApp(publicKey);

// If the app doesn't exist in the database we know the app is invalid or the public_key is wrong.
if (!app) {
  return Astro.redirect("/app/invalid");
}

// Check if a link has already been established before.
const link = await getLinkConnection(user, app);

// If a link has not yet been established, send data to the server and write a link into the database.
if (!link) {
  // This request might fail, we need to return an error if it does.
  try {
    await fetch(app.success_url, {
      body: JSON.stringify({
        status: "connected",
        auth_response: {
          user_public_id: user.public_id,
          username: user.username,
          email: user.email,
        },
      }),
      headers: {
        "content-type": "application/json",
      },
      method: "POST",
    });

    // AFTER that, we can write the connection into our own database.
    // This is important to do it afterwards since we don't yet know the outcome of the request
    // and if the server can't be reached we don't want to bother the user with half baked connections
    const success = await addLinkConnection(user, app);

    if (!success) {
      return Astro.redirect("/app/failure");
    }
  } catch (e) {
    return Astro.redirect("/app/failure");
  }
}
---

<BlankLayout title="Link - Success">
  <main>
    <div class="row mb-xl align-center">
      <img src="https://continuum-ai.de/favicon.ico" class="round" />
      <span class="connection"></span>
      <img
        src="https://cdn.dribbble.com/userupload/3158902/file/original-7c71bfa677e61dea61bc2acd59158d32.jpg?resize=400x0"
        class="round"
      />
    </div>
    <h1>The App was Linked to your Account!</h1>
    <div class="border-container gap-sm">
      <LinkClose
        data={{
          status: "connected",
          auth_response: {
            public_key: publicKey,
            user_id: user.public_id,
          },
        }}
        domain={app.domain}
        client:load
      />
      <p>
        The Link was established successfully! Your personal data has been
        transmitted and you can now log in with Continuum Link. You can close
        this window now.
      </p>
    </div>
  </main>
</BlankLayout>
